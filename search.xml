<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>uthread讲解</title>
    <url>/2024/06/24/uthread%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[<p><a href="https://developer.aliyun.com/article/52886#slide-4">ucontext-人人都可以实现的简单协程库</a><br><a href="https://hub.nuaa.cf/Winnerhust/uthread">github地址</a><br><a href="https://mp.weixin.qq.com/s?__biz=Mzg3Mzg0NTQ0Ng==&mid=2247484615&idx=1&sn=9948c7da719028004513981d2a79bf41&chksm=ced8836ef9af0a780a72e02c83bfbbad5772209ecfefe81c8fbc1edcd1f2d9cf53a53c65e764&token=1321706181&lang=zh_CN#rd">vscode c++调试环境搭建</a><br><a href="https://zhuanlan.zhihu.com/p/339837580">程序员应如何理解协程</a></p>
<p>在此记录一下协程的基本概念，后续再考虑实现手写的协程。</p>
<hr>
<h2 id="uthread说明"><a href="#uthread说明" class="headerlink" title="uthread说明"></a>uthread说明</h2><p>一个简单的C++用户级线程（协程）库</p>
<ul>
<li>一个调度器可以拥有多个协程</li>
<li>通过<code>uthread_create</code>创建一个协程</li>
<li>通过<code>uthread_resume</code>运行或者恢复运行一个协程</li>
<li>通过<code>uthread_yield</code>挂起一个协程，并切换到主进程中</li>
<li>通过<code>schedule_finished</code> 判断调度器中的协程是否全部运行完毕</li>
<li>每个协程最多拥有128Kb的栈，增大栈空间需要修改源码的宏<code>DEFAULT_STACK_SIZE </code>，并重新编译</li>
</ul>
<p>更详细的介绍，请查看博客 <a href="http://blog.csdn.net/qq910894904/article/details/41911175">人既无名的专栏</a>. </p>
<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul>
<li><p>ctx保存协程的上下文，stack为协程的栈，栈大小默认为DEFAULT_STACK_SZIE&#x3D;128Kb.你可以根据自己的需求更改栈的大小。</p>
</li>
<li><p>func为协程执行的用户函数，arg为func的参数</p>
</li>
<li><p>state表示协程的运行状态，包括FREE,RUNNABLE,RUNING,SUSPEND,分别表示空闲，就绪，正在执行和挂起四种状态。</p>
</li>
<li><p>调度器包括主函数的上下文main,包含当前调度器拥有的所有协程的vector类型的threads，以及指向当前正在执行的协程的编号running_thread.如果当前没有正在执行的协程时，running_thread&#x3D;-1.</p>
</li>
</ul>
<p>下面给出一个简单例子，可以自己打断点调试一下，<font color = red>最重要的点：我感觉恢复上下文的时候，是恢复到下一行！我们只需要关注上下文之间的跳转即可！！！</font></p>
<img src="/2024/06/24/uthread%E8%AE%B2%E8%A7%A3/uthread1.png" class="" title="图片1">
<p>下面也给出调试的配置launch.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) 启动&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/test1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;将反汇编风格设置为 Intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-gdb-set disassembly-flavor intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>重点是这一行 <code>&quot;program&quot;: &quot;$&#123;workspaceFolder&#125;/test1&quot;</code></p>
<h2 id="uthread代码"><a href="#uthread代码" class="headerlink" title="uthread代码"></a>uthread代码</h2><p>总共就只有四个文件，这里都给出来，加了一点自己的注释理解</p>
<p>Makefile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">all:</span><br><span class="line">	g++  uthread.cpp  -g -c</span><br><span class="line">	g++  main.cpp -g -o main uthread.o</span><br><span class="line">clean:</span><br><span class="line">	rm -f uthread.o main</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>uthread.h</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @file  thread.h</span></span><br><span class="line"><span class="comment">* @author chenxueyou</span></span><br><span class="line"><span class="comment">* @version 0.1</span></span><br><span class="line"><span class="comment">* @brief   :A asymmetric coroutine library for C++</span></span><br><span class="line"><span class="comment">* History</span></span><br><span class="line"><span class="comment">*      1. Date: 2014-12-12 </span></span><br><span class="line"><span class="comment">*          Author: chenxueyou</span></span><br><span class="line"><span class="comment">*          Modification: this file was created </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_UTHREAD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_UTHREAD_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _XOPEN_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ucontext.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_STACK_SZIE (1024*128)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_UTHREAD_SIZE   1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">ThreadState</span>&#123;FREE,RUNNABLE,RUNNING,SUSPEND&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">schedule_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*Fun)</span><span class="params">(<span class="type">void</span> *arg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">uthread_t</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ucontext_t</span> ctx;</span><br><span class="line">    Fun func;</span><br><span class="line">    <span class="type">void</span> *arg;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">ThreadState</span> state;</span><br><span class="line">    <span class="type">char</span> stack[DEFAULT_STACK_SZIE];</span><br><span class="line">&#125;<span class="type">uthread_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">schedule_t</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ucontext_t</span> main;</span><br><span class="line">    <span class="type">int</span> running_thread;</span><br><span class="line">    <span class="type">uthread_t</span> *threads;</span><br><span class="line">    <span class="type">int</span> max_index; <span class="comment">// 曾经使用到的最大的index + 1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">schedule_t</span>():<span class="built_in">running_thread</span>(<span class="number">-1</span>), <span class="built_in">max_index</span>(<span class="number">0</span>) &#123;</span><br><span class="line">        threads = <span class="keyword">new</span> <span class="type">uthread_t</span>[MAX_UTHREAD_SIZE];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_UTHREAD_SIZE; i++) &#123;</span><br><span class="line">            threads[i].state = FREE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">schedule_t</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] threads;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="type">schedule_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*help the thread running in the schedule*/</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">uthread_body</span><span class="params">(<span class="type">schedule_t</span> *ps)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Create a user&#x27;s thread</span></span><br><span class="line"><span class="comment">*    @param[in]:</span></span><br><span class="line"><span class="comment">*        schedule_t &amp;schedule </span></span><br><span class="line"><span class="comment">*        Fun func: user&#x27;s function</span></span><br><span class="line"><span class="comment">*        void *arg: the arg of user&#x27;s function</span></span><br><span class="line"><span class="comment">*    @param[out]:</span></span><br><span class="line"><span class="comment">*    @return:</span></span><br><span class="line"><span class="comment">*        return the index of the created thread in schedule</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">uthread_create</span><span class="params">(<span class="type">schedule_t</span> &amp;schedule,Fun func,<span class="type">void</span> *arg)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Hang the currently running thread, switch to main thread */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uthread_yield</span><span class="params">(<span class="type">schedule_t</span> &amp;schedule)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* resume the thread which index equal id*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uthread_resume</span><span class="params">(<span class="type">schedule_t</span> &amp;schedule,<span class="type">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*test whether all the threads in schedule run over</span></span><br><span class="line"><span class="comment">* @param[in]:</span></span><br><span class="line"><span class="comment">*    const schedule_t &amp; schedule </span></span><br><span class="line"><span class="comment">* @param[out]:</span></span><br><span class="line"><span class="comment">* @return:</span></span><br><span class="line"><span class="comment">*    return 1 if all threads run over,otherwise return 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">schedule_finished</span><span class="params">(<span class="type">const</span> <span class="type">schedule_t</span> &amp;schedule)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>uthread.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @file  uthread.cpp</span></span><br><span class="line"><span class="comment">* @author chenxueyou</span></span><br><span class="line"><span class="comment">* @version 0.1</span></span><br><span class="line"><span class="comment">* @brief   :A asymmetric coroutine library for C++</span></span><br><span class="line"><span class="comment">* History</span></span><br><span class="line"><span class="comment">*      1. Date: 2014-12-12 </span></span><br><span class="line"><span class="comment">*          Author: chenxueyou</span></span><br><span class="line"><span class="comment">*          Modification: this file was created </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MY_UTHREAD_CPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_UTHREAD_CPP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;uthread.h&quot;</span></span></span><br><span class="line"><span class="comment">//#include &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uthread_resume</span><span class="params">(<span class="type">schedule_t</span> &amp;schedule , <span class="type">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(id &lt; <span class="number">0</span> || id &gt;= schedule.max_index)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uthread_t</span> *t = &amp;(schedule.threads[id]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果id对应的协程状态是挂起，就激活它的上下文，然后保存当前的上下文</span></span><br><span class="line">    <span class="keyword">if</span> (t-&gt;state == SUSPEND) &#123;</span><br><span class="line">        <span class="built_in">swapcontext</span>(&amp;(schedule.main),&amp;(t-&gt;ctx));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uthread_yield</span><span class="params">(<span class="type">schedule_t</span> &amp;schedule)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">// 只有当前有协程在运行，才能yield</span></span><br><span class="line">    <span class="keyword">if</span>(schedule.running_thread != <span class="number">-1</span> )&#123;</span><br><span class="line">        <span class="type">uthread_t</span> *t = &amp;(schedule.threads[schedule.running_thread]);</span><br><span class="line">        t-&gt;state = SUSPEND;</span><br><span class="line">        schedule.running_thread = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 和resume正好相反</span></span><br><span class="line">        <span class="built_in">swapcontext</span>(&amp;(t-&gt;ctx),&amp;(schedule.main));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uthread_body</span><span class="params">(<span class="type">schedule_t</span> *ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = ps-&gt;running_thread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 说明有执行的协程，取出来，执行完了以后设置为空闲</span></span><br><span class="line">    <span class="keyword">if</span>(id != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="type">uthread_t</span> *t = &amp;(ps-&gt;threads[id]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里是执行用户函数，比如main.cpp中的func2和func3，执行完了回到这里</span></span><br><span class="line">        t-&gt;<span class="built_in">func</span>(t-&gt;arg);</span><br><span class="line"></span><br><span class="line">        t-&gt;state = FREE;</span><br><span class="line">        </span><br><span class="line">        ps-&gt;running_thread = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">uthread_create</span><span class="params">(<span class="type">schedule_t</span> &amp;schedule,Fun func,<span class="type">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果有空闲的协程，就退出，记录当前这个空闲的id</span></span><br><span class="line">    <span class="keyword">for</span>(id = <span class="number">0</span>; id &lt; schedule.max_index; ++id )&#123;</span><br><span class="line">        <span class="keyword">if</span>(schedule.threads[id].state == FREE)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果是最大id，就要更新最大索引了，设置为runable就绪</span></span><br><span class="line">    <span class="keyword">if</span> (id == schedule.max_index) &#123;</span><br><span class="line">        schedule.max_index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uthread_t</span> *t = &amp;(schedule.threads[id]);</span><br><span class="line"></span><br><span class="line">    t-&gt;state = RUNNABLE;</span><br><span class="line">    t-&gt;func = func;</span><br><span class="line">    t-&gt;arg = arg;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getcontext</span>(&amp;(t-&gt;ctx));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置协程上下文，下一个上下文为schedule里面保存的main上下文</span></span><br><span class="line">    t-&gt;ctx.uc_stack.ss_sp = t-&gt;stack;</span><br><span class="line">    t-&gt;ctx.uc_stack.ss_size = DEFAULT_STACK_SZIE;</span><br><span class="line">    t-&gt;ctx.uc_stack.ss_flags = <span class="number">0</span>;</span><br><span class="line">    t-&gt;ctx.uc_link = &amp;(schedule.main);</span><br><span class="line">    schedule.running_thread = id;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将 uthread_body 函数的地址转换为一个无参数且无返回值的函数指针</span></span><br><span class="line">    <span class="comment">// uthread_body 是一个用户定义的函数，将在新线程中执行。</span></span><br><span class="line">    <span class="built_in">makecontext</span>(&amp;(t-&gt;ctx),(<span class="built_in">void</span> (*)(<span class="type">void</span>))(uthread_body),<span class="number">1</span>,&amp;schedule);</span><br><span class="line">    <span class="built_in">swapcontext</span>(&amp;(schedule.main), &amp;(t-&gt;ctx));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查协程调度器中的所有协程是否都已完成执行</span></span><br><span class="line"><span class="comment">// 0代表还有协程没有执行完成，1代表都执行完成</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">schedule_finished</span><span class="params">(<span class="type">const</span> <span class="type">schedule_t</span> &amp;schedule)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (schedule.running_thread != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; schedule.max_index; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(schedule.threads[i].state != FREE)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>main.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;uthread.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">(<span class="type">void</span> * arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">void</span> * arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">    <span class="built_in">uthread_yield</span>(*(<span class="type">schedule_t</span> *)arg);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">(<span class="type">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3333&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3333&quot;</span>);</span><br><span class="line">    <span class="built_in">uthread_yield</span>(*(<span class="type">schedule_t</span> *)arg);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3333&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3333&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">context_test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> stack[<span class="number">1024</span>*<span class="number">128</span>];</span><br><span class="line">    <span class="type">ucontext_t</span> uc1,ucmain;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">getcontext</span>(&amp;uc1);</span><br><span class="line">    uc1.uc_stack.ss_sp = stack;</span><br><span class="line">    uc1.uc_stack.ss_size = <span class="number">1024</span>*<span class="number">128</span>;</span><br><span class="line">    uc1.uc_stack.ss_flags = <span class="number">0</span>;</span><br><span class="line">    uc1.uc_link = &amp;ucmain;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">makecontext</span>(&amp;uc1,(<span class="built_in">void</span> (*)(<span class="type">void</span>))func1,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">swapcontext</span>(&amp;ucmain,&amp;uc1);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">schedule_test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">schedule_t</span> s;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> id1 = <span class="built_in">uthread_create</span>(s,func3,&amp;s);</span><br><span class="line">    <span class="type">int</span> id2 = <span class="built_in">uthread_create</span>(s,func2,&amp;s);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">schedule_finished</span>(s))&#123;</span><br><span class="line">        <span class="built_in">uthread_resume</span>(s,id2);</span><br><span class="line">        <span class="built_in">uthread_resume</span>(s,id1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;main over&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">context_test</span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line">    <span class="built_in">schedule_test</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出如下所示</p>
<img src="/2024/06/24/uthread%E8%AE%B2%E8%A7%A3/uthread2.png" class="" title="图片2">

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
